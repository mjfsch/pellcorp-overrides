#!!!!!!!!!!!!!!!! EXPEREMENTAL !!!!!!!!!!!!!!!!!!!!!!!
#!!!!!!!    TRY AT YOUR OWN RISK  !!!!!!!!!!!!!!!!!!!!

[gcode_macro LOAD_ALL]
variable_load_complete: 0
variable_last_loaded: 0
variable_max_load:8 #starts at 0, so 4 will load T0-3
gcode:
  {% if not printer["filament_switch_sensor filament_sensor"].filament_detected %}
 SET_GCODE_VARIABLE MACRO=LOAD_ALL VARIABLE=load_complete VALUE=1 # each run reset
 SET_GCODE_VARIABLE MACRO=LOAD_ALL VARIABLE=last_loaded VALUE=0
 UPDATE_DELAYED_GCODE ID=LOAD_SEQUENCE DURATION=1.0
 {% else %}
  RESPOND TYPE=error MSG='Head sensor blocked, remove and try again'
  {% endif %}
  
[delayed_gcode LOAD_SEQUENCE]
gcode:
 {% set LOAD_COMPLETE = printer["gcode_macro LOAD_ALL"].load_complete|default(0)|int %}
 {% set LAST_LOADED = printer["gcode_macro LOAD_ALL"].last_loaded|default(0)|int %}
 {% set MAX_LOAD = printer["gcode_macro LOAD_ALL"].max_load|default(0)|int %}
  UPDATE_DELAYED_GCODE ID=LOAD_SEQUENCE DURATION=1.0
 {% if LOAD_COMPLETE==1 %} # if the load has been done (or first run)
 #{action_respond_info("AutoLoad all lc trigger")}
 {% if LAST_LOADED < MAX_LOAD %}
 {action_respond_info("AutoLoad next load...")}
	SET_GCODE_VARIABLE MACRO=LOAD_ALL VARIABLE=load_complete VALUE=0 
    #check if doing all in sequence or if used are known, used=2 default value for unknown
  {% set TINUSE = printer["gcode_macro START_PRINT"].tused %}
  #{action_respond_info("TINUSE: %s" % (TINUSE | pprint | replace("\n", "") | replace("\"", "\\\"")))}
    {% if printer['pause_resume'].is_paused and not TINUSE[0]=='2' %}
        {% if TINUSE[LAST_LOADED]=='true'%}
        {action_respond_info("Found T %s is needed" %LAST_LOADED)}
          T{LAST_LOADED}
          SET_GCODE_VARIABLE MACRO=LOAD_ALL VARIABLE=last_loaded VALUE={LAST_LOADED + 1}
         LOAD_FILAMENT 
      {% else %}
          #if got to the end of the list, then all must be done
          {action_respond_info("Found T %s is not needed" %LAST_LOADED)}
          SET_GCODE_VARIABLE MACRO=LOAD_ALL VARIABLE=last_loaded VALUE={LAST_LOADED + 1}
          SET_GCODE_VARIABLE MACRO=LOAD_ALL VARIABLE=load_complete VALUE=1  
      {% endif %}
      
    {% else %}
	T{LAST_LOADED} #sync next extruder
	SET_GCODE_VARIABLE MACRO=LOAD_ALL VARIABLE=last_loaded VALUE={LAST_LOADED + 1}
	LOAD_FILAMENT
    {% endif %}
   
	{% else %}
	{action_respond_info("AutoLoad all finished")}
	UPDATE_DELAYED_GCODE ID=LOAD_SEQUENCE DURATION=0 #disable function
    #  {% set is_print_active = printer['virtual_sdcard'].is_active %}
    {% if printer['pause_resume'].is_paused %}
    _START_PRINT_cont
    {% endif %}
	{% endif %}   
 {% endif %}
	


[save_variables]
filename: ~/printer_data/config/variables.cfg

[pause_resume]

[display_status]

[filament_switch_sensor filament_sensor]
pause_on_runout: true
switch_pin: !cp_Head:PC10

[respond]
default_type: echo
default_prefix:

[gcode_macro LOAD_FILAMENT]
gcode:
   {% if not printer["filament_switch_sensor filament_sensor"].filament_detected %}
  {action_respond_info("AutoLoad Start")}
   {action_respond_info("AutoLoad Feeding.....")}
   UPDATE_DELAYED_GCODE ID=auto_load DURATION=0.7
    {% if printer['pause_resume'].is_paused %}
     UPDATE_DELAYED_GCODE ID=auto_load_timeout DURATION=60 #if running check during print start, timeout reduced
    {% else %}
   UPDATE_DELAYED_GCODE ID=auto_load_timeout DURATION=120
   {% endif %}
  {% else %}
  RESPOND TYPE=error MSG='Head sensor blocked, remove and try again'
  {% endif %}

[delayed_gcode auto_load]
gcode:
   {% if not printer["filament_switch_sensor filament_sensor"].filament_detected %}
   UPDATE_DELAYED_GCODE ID=auto_load DURATION=0.7
    G91
    G92 E0
    G1 E25 F2500 # fast-load
  {% else %}
   UPDATE_DELAYED_GCODE ID=auto_load DURATION=0
   UPDATE_DELAYED_GCODE ID=auto_unload DURATION=0.5
  {action_respond_info("AutoLoad Detected")}
  {action_respond_info("AutoLoad Retracting...")}
  {% endif %}
  
[delayed_gcode auto_unload]
gcode:
   {% if printer["filament_switch_sensor filament_sensor"].filament_detected %}
   UPDATE_DELAYED_GCODE ID=auto_unload DURATION=0.5  
    G91
    G92 E0
    G1 E-1 F500
  {% else %}
  {action_respond_info("AutoLoad Parking")}
   UPDATE_DELAYED_GCODE ID=auto_unload DURATION=0
   UPDATE_DELAYED_GCODE ID=auto_load_timeout DURATION=0
     G91
    G92 E0
    G1 E-35 F1000
  SET_GCODE_VARIABLE MACRO=LOAD_ALL VARIABLE=load_complete VALUE=1
  {action_respond_info("AutoLoad Finished")}
  {% endif %}

[delayed_gcode auto_load_timeout]
gcode:
 {% if printer['pause_resume'].is_paused %} #if during print start macro
  UPDATE_DELAYED_GCODE ID=LOAD_SEQUENCE DURATION=0
  UPDATE_DELAYED_GCODE ID=auto_unload DURATION=0
  UPDATE_DELAYED_GCODE ID=auto_load DURATION=0
  UPDATE_DELAYED_GCODE ID=PRINT_START_fail DURATION=1
 {% else %}
  RESPOND TYPE=error MSG='AutoLoad Failed â€“ Check filament and try again'
  UPDATE_DELAYED_GCODE ID=auto_unload DURATION=0
  UPDATE_DELAYED_GCODE ID=auto_load DURATION=0
  {% endif %} 

[gcode_macro PARK_FILAMENT]
gcode:
  M83
  G1 E-100 F300

[gcode_macro UNLOAD_FILAMENT]
   variable_unload_distance:  250 #*3
gcode:
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    FILAMENT_CUT
    G1 E-{unload_distance} F2500 # fast-unload
    G1 E-{unload_distance} F2500 # fast-unload
    G1 E-{unload_distance} F2500# fast-unload
    RESTORE_GCODE_STATE NAME=unload_state
    

[gcode_macro FILAMENT_CHANGE]
gcode:
    {% set LAYER_NUM = params.LAYER_NUM|int %}
    {% set NEXT_EXTRUDER = params.NEXT_EXTRUDER|int %}

    {% if LAYER_NUM == -1 %}

    {% endif %}

    {% if LAYER_NUM != -1 %}
    #{LAYER_NUM}
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
    FILAMENT_CUT
    G4 P300
    G91
    G1 X-20 E-30 F300 #X10 ##This is the cause of the orignal error need to move negative first
    G92 E0
    G1 X10 E-40 F500 #X-20
    G92 E0
    G1 X-10 E-35 F600 #X10
    T{NEXT_EXTRUDER}
    G92 E0
    G1 X10 E20 F500 #X-10
    G92 E0
    G1 X-10 E30 F300 #X10
    #should be detected by this point
    G92 E0
    G1 X10 E30 F300 #X-10
    G92 E0
    G1 X10 E25 F300
    G90
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
    {% endif %}


[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}
  {% set z_park_delta = 50.0 %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    {% endif %}

  FILAMENT_CUT
  G91
  G1 E-105 F600
  TURN_OFF_HEATERS
   TURN_OFF_FANS
  CANCEL_PRINT_BASE


[gcode_macro START_PRINT]
variable_inital_extruder: 0
variable_inital_temp: 0
variable_inital_bed: 0
variable_tused: [""]
gcode:
   # BED_MESH_PROFILE LOAD=default
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER = params.EXTRUDER|default(0)|int %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=inital_extruder VALUE={EXTRUDER}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=inital_temp VALUE={EXTRUDER_TEMP}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=inital_bed VALUE={BED_TEMP}
    {% set T0USED =params.T0USED|default(2)|string %}
    {% set T1USED =params.T1USED|default(2)|string %}
    {% set T2USED =params.T2USED|default(2)|string %}
    {% set T3USED =params.T3USED|default(2)|string %}
    {% set T4USED =params.T4USED|default(2)|string %}
    {% set T5USED =params.T5USED|default(2)|string %}
    {% set T6USED =params.T6USED|default(2)|string %}
    {% set T7USED =params.T7USED|default(2)|string %}
    {% set TINUSE =[T0USED, T1USED, T2USED, T3USED, T4USED, T5USED, T6USED, T7USED] %}

    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=tused VALUE="{TINUSE}"
    CLEAR_PAUSE
    M140 S{BED_TEMP}
    #G4 P500
    PAUSE_BASE
    {% if printer["filament_switch_sensor filament_sensor"].filament_detected %}
    {action_respond_info("Head detected at start print error")}
    UPDATE_DELAYED_GCODE ID=PRINT_START_detect DURATION=1
    {% else %}
    LOAD_ALL
    {% endif %}

[gcode_macro _detect_recover]
gcode:
  _SET_FILAMENT
  _START_PRINT_retest

[gcode_macro _START_PRINT_retest]
gcode:
    RESPOND TYPE=command MSG=action:prompt_end
    {% if printer["filament_switch_sensor filament_sensor"].filament_detected %}
    #PAUSE_BASE
    {action_respond_info("Head detected at start print error")}
    UPDATE_DELAYED_GCODE ID=PRINT_START_detect DURATION=1
    {% else %}
     LOAD_ALL
    {% endif %}

[delayed_gcode PRINT_START_detect]
gcode:
    RESPOND TYPE=command MSG="action:prompt_begin Abnormal filament status"
    RESPOND TYPE=command MSG="action:prompt_text Filament detected in head at print start"
   # RESPOND TYPE=command MSG="action:prompt_text Check filament state and resume when resolved"
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button Retest|_START_PRINT_retest|primary"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
     RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button Skip-Test|_START_PRINT_cont|primary"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button Try Auto recover|_detect_recover|primary"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_footer_button CANCEL|CANCEL_PRINT|error"
    RESPOND TYPE=command MSG="action:prompt_show"

[delayed_gcode PRINT_START_fail]
gcode:
   {% set svv = printer.save_variables.variables %}
    RESPOND TYPE=command MSG="action:prompt_begin Error While Testing Filament"
    RESPOND TYPE=command MSG="action:prompt_text Filament not detected for T{svv.nvm_last_tool}"
   # RESPOND TYPE=command MSG="action:prompt_text Check filament state and resume when resolved"
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button Retest|_START_PRINT_retest|primary"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
     RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button Skip-Test|_START_PRINT_cont|primary"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_footer_button CANCEL|CANCEL_PRINT|error"
    RESPOND TYPE=command MSG="action:prompt_show"
  
[gcode_macro _START_PRINT_cont]

gcode:
  RESPOND TYPE=command MSG=action:prompt_end
  RESUME_BASE
  CLEAR_PAUSE
    {% set EXTRUDER = printer["gcode_macro START_PRINT"].inital_extruder|default(0)|int %}
    {% set EXTRUDER_TEMP = printer["gcode_macro START_PRINT"].inital_temp|default(0)|float %}
    {% set BED_TEMP = printer["gcode_macro START_PRINT"].inital_bed|default(0)|float %}
    {% set axismax = printer.toolhead.axis_maximum %}
    {% set axismin_x = printer.toolhead.axis_minimum.x %}
    {% set axismin_y = printer.toolhead.axis_minimum.y %}
   
    #update tracking of the extruder used in single color printing
    
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=inital_extruder VALUE={EXTRUDER}
    T{EXTRUDER}
    {action_respond_info("Extruder Set")}
    #pre-heat the extruder while we wait for the bed - none blocking
    M104 S150
    # Heat bed for probing
    M190 S{BED_TEMP}
    # Use absolute coordinates
    G90
    # Home the printer
    G28  
      
	BED_MESH_PROFILE LOAD=default

    G1 Z10 F450
    
    M109 S{EXTRUDER_TEMP}
    T{EXTRUDER}
       G92 E0 
      G1 X2 Y152 Z0.4 F900 
      G92 E0
      G1 Y77 E20 F900 
      G92 E0
      G1 Y2 E20 F900 
      G92 E0
      G1 X100 E30 F900 
      G92 E0
      #should be detected now from park - if not an error is a good idea!
      SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
      G1 X198 E30 F900 
      G92 E0
      G1 Y4 F900 
      G92 E0
      G1 X100 E30 F900
      G92 E0
      G1 X4 E30 F900 
      G92 E0
      G1 Y77 E20 F900
      G92 E0
      G1 Y152 E20 F900
      G92 E0 ;Reset Extruder
      G1 X6 F900 
      G92 E0
      G1 Y77 E20 F900 
      G92 E0
      G1 Y6 E20 F900
   


    G92 E0 ;Reset Extruder

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
  {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  RESUME_BASE {get_params}

[gcode_macro END_PRINT]
gcode:
    {% set x_stop = params.X|default(printer.toolhead.axis_maximum.x-5)|int %}
    {% set y_stop = params.Y|default(printer.toolhead.axis_maximum.y-5)|int %}
    {% set z_stop = printer.toolhead.axis_maximum.z|int %}
    {% set z_pos = printer.toolhead.position.z|int %}

   {% set z_park_delta = 50.0 %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    {% endif %}

    FILAMENT_CUT
    G1 E-108
    G90
  
    G1 X{x_stop} Y{y_stop}
    M106 S0
    M104 S0
    M140 S0
    TURN_OFF_FANS


